from collections import deque

class State:
    def __init__(self, m_left, c_left, m_right, c_right, boat):
        self.m_left = m_left  # Number of missionaries on the left bank
        self.c_left = c_left  # Number of cannibals on the left bank
        self.m_right = m_right  # Number of missionaries on the right bank
        self.c_right = c_right  # Number of cannibals on the right bank
        self.boat = boat  # Position of the boat (1 for left, 0 for right)

    def is_valid(self):
        # Check if the state is valid
        if (self.m_left < 0 or self.c_left < 0 or
            self.m_right < 0 or self.c_right < 0):
            return False
        if (self.m_left > 0 and self.m_left < self.c_left):
            return False
        if (self.m_right > 0 and self.m_right < self.c_right):
            return False
        return True

    def is_goal(self):
        # Check if all missionaries and cannibals are on the right bank
        return self.m_left == 0 and self.c_left == 0

def get_next_states(state):
    next_states = []
    if state.boat == 1:  # Boat is on the left bank
        for m in range(3):  # 0, 1, or 2 missionaries
            for c in range(3):  # 0, 1, or 2 cannibals
                if (m + c > 0) and (m + c <= 2):  # At least one person must cross
                    new_state = State(
                        state.m_left - m,
                        state.c_left - c,
                        state.m_right + m,
                        state.c_right + c,
                        0  # Boat moves to the right bank
                    )
                    if new_state.is_valid():
                        next_states.append(new_state)
    else:  # Boat is on the right bank
        for m in range(3):  # 0, 1, or 2 missionaries
            for c in range(3):  # 0, 1, or 2 cannibals
                if (m + c > 0) and (m + c <= 2):  # At least one person must cross
                    new_state = State(
                        state.m_left + m,
                        state.c_left + c,
                        state.m_right - m,
                        state.c_right - c,
                        1  # Boat moves to the left bank
                    )
                    if new_state.is_valid():
                        next_states.append(new_state)
    return next_states

def bfs():
    initial_state = State(3, 3, 0, 0, 1)  # 3 missionaries and 3 cannibals on the left bank
    queue = deque([initial_state])
    visited = set()

    while queue:
        current_state = queue.popleft()

        if current_state.is_goal():
            return True  # Solution found

        visited.add((current_state.m_left, current_state.c_left, current_state.boat))

        for next_state in get_next_states(current_state):
            if (next_state.m_left, next_state.c_left, next_state.boat) not in visited:
                queue.append(next_state)

    return False  # No solution found

if __name__ == "__main__":
    if bfs():
        print("Solution found: All missionaries and cannibals have crossed the river safely.")
    else:
        print("No solution exists.")
