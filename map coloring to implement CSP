class MapColoring:
    def __init__(self, graph, colors):
        self.graph = graph  # Adjacency list representation of the graph
        self.colors = colors  # List of available colors
        self.color_assignment = {}  # Dictionary to store color assignments

    def is_valid(self, node, color):
        """Check if the color assignment is valid for the given node."""
        for neighbor in self.graph[node]:
            if neighbor in self.color_assignment and self.color_assignment[neighbor] == color:
                return False
        return True

    def backtrack(self, node):
        """Backtracking function to assign colors to nodes."""
        if node == len(self.graph):  # All nodes are assigned
            return True

        for color in self.colors:
            if self.is_valid(node, color):
                self.color_assignment[node] = color  # Assign color
                if self.backtrack(node + 1):  # Recur to assign color to the next node
                    return True
                del self.color_assignment[node]  # Remove color assignment (backtrack)

        return False  # No valid color assignment found

    def solve(self):
        """Solve the map coloring problem."""
        if self.backtrack(0):
            return self.color_assignment
        else:
            return None  # No solution found

if __name__ == "__main__":
    # Example graph represented as an adjacency list
    graph = {
        0: [1, 2],  # Node 0 is connected to Node 1 and Node 2
        1: [0, 2, 3],  # Node 1 is connected to Node 0, Node 2, and Node 3
        2: [0, 1, 3],  # Node 2 is connected to Node 0, Node 1, and Node 3
        3: [1, 2, 4],  # Node 3 is connected to Node 1, Node 2, and Node 4
        4: [3]  # Node 4 is connected to Node 3
    }

    colors = ['Red', 'Green', 'Blue']  # Available colors

    map_coloring = MapColoring(graph, colors)
    solution = map_coloring.solve()

    if solution:
        print("Color assignment:", solution)
    else:
        print("No solution found.")
