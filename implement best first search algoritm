import heapq

class Node:
    def __init__(self, name, heuristic):
        self.name = name
        self.heuristic = heuristic  # Estimated cost to reach the goal
        self.edges = []  # List of tuples (neighbor, cost)

    def add_edge(self, neighbor, cost):
        self.edges.append((neighbor, cost))

    def __lt__(self, other):
        return self.heuristic < other.heuristic

def best_first_search(start_node, goal_node):
    """Perform Best First Search to find the path from start_node to goal_node."""
    open_set = []
    closed_set = set()

    # Push the start node into the priority queue
    heapq.heappush(open_set, (start_node.heuristic, start_node))

    while open_set:
        # Get the node with the lowest heuristic value
        current_heuristic, current_node = heapq.heappop(open_set)

        # Check if we have reached the goal
        if current_node.name == goal_node.name:
            return f"Goal {goal_node.name} reached!"

        closed_set.add(current_node.name)

        # Explore neighbors
        for neighbor, cost in current_node.edges:
            if neighbor.name not in closed_set:
                # Push the neighbor into the priority queue
                heapq.heappush(open_set, (neighbor.heuristic, neighbor))

    return "Goal not reachable."

def main():
    # Create nodes with heuristic values
    a = Node("A", 7)
    b = Node("B", 6)
    c = Node("C", 2)
    d = Node("D", 1)
    e = Node("E", 0)  # Goal node

    # Add edges (neighbor, cost)
    a.add_edge(b, 1)
    a.add_edge(c, 4)
    b.add_edge(d, 2)
    b.add_edge(e, 3)
    c.add_edge(d, 1)
    d.add_edge(e, 1)

    # Perform Best First Search
    result = best_first_search(a, e)
    print(result)

if __name__ == "__main__":
    main()
