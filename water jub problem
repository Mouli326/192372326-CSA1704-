from collections import deque

def bfs(jug1_capacity, jug2_capacity, target):
    visited = set()
    queue = deque([(0, 0)])  # Start with both jugs empty

    while queue:
        jug1, jug2 = queue.popleft()

        # Check if we have reached the target
        if jug1 == target or jug2 == target or jug1 + jug2 == target:
            return True

        # Mark the current state as visited
        if (jug1, jug2) in visited:
            continue
        visited.add((jug1, jug2))

        # Possible actions
        # Fill Jug 1
        queue.append((jug1_capacity, jug2))
        # Fill Jug 2
        queue.append((jug1, jug2_capacity))
        # Empty Jug 1
        queue.append((0, jug2))
        # Empty Jug 2
        queue.append((jug1, 0))
        # Pour Jug 1 into Jug 2
        pour_to_jug2 = min(jug1, jug2_capacity - jug2)
        queue.append((jug1 - pour_to_jug2, jug2 + pour_to_jug2))
        # Pour Jug 2 into Jug 1
        pour_to_jug1 = min(jug2, jug1_capacity - jug1)
        queue.append((jug1 + pour_to_jug1, jug2 - pour_to_jug1))

    return False

if __name__ == "__main__":
    jug1_capacity = 4  # Capacity of Jug 1
    jug2_capacity = 3  # Capacity of Jug 2
    target = 2         # Target amount of water

    if bfs(jug1_capacity, jug2_capacity, target):
        print(f"It is possible to measure {target} liters of water.")
    else:
        print(f"It is not possible to measure {target} liters of water.")
