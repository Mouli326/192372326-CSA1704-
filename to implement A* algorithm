import heapq

class Node:
    def __init__(self, position, parent=None):
        self.position = position  # (x, y) coordinates
        self.parent = parent  # Parent node
        self.g = 0  # Cost from start to this node
        self.h = 0  # Heuristic cost to goal
        self.f = 0  # Total cost (g + h)

    def __eq__(self, other):
        return self.position == other.position

    def __lt__(self, other):
        return self.f < other.f

def heuristic(a, b):
    """Calculate the Manhattan distance heuristic."""
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def a_star(start, goal, grid):
    """Perform A* algorithm to find the shortest path."""
    open_list = []
    closed_list = set()

    start_node = Node(start)
    goal_node = Node(goal)

    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)
        closed_list.add(current_node)

        # Check if we reached the goal
        if current_node == goal_node:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path

        # Generate neighbors (4 possible directions)
        neighbors = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        for new_position in neighbors:
            node_position = (current_node.position[0] + new_position[0],
                             current_node.position[1] + new_position[1])

            # Check if the position is within the grid bounds
            if (0 <= node_position[0] < len(grid) and
                0 <= node_position[1] < len(grid[0]) and
                grid[node_position[0]][node_position[1]] == 0):  # Check if walkable

                neighbor_node = Node(node_position, current_node)

                if neighbor_node in closed_list:
                    continue

                # Calculate costs
                neighbor_node.g = current_node.g + 1
                neighbor_node.h = heuristic(neighbor_node.position, goal_node.position)
                neighbor_node.f = neighbor_node.g + neighbor_node.h

                # Check if neighbor is already in open list
                if add_to_open(open_list, neighbor_node):
                    heapq.heappush(open_list, neighbor_node)

    return None  # No path found

def add_to_open(open_list, neighbor):
    """Check if the neighbor should be added to the open list."""
    for node in open_list:
        if neighbor == node and neighbor.g >= node.g:
            return False
    return True

if __name__ == "__main__":
    # 0 represents walkable cells, 1 represents obstacles
    grid = [
        [0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0],
        [0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0]
    ]

    start = (0, 0)  # Starting position
    goal = (4, 4)   # Goal position

    path = a_star(start, goal, grid)
    if path:
        print("Path found:", path)
    else:
        print("No path found.")
